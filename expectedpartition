#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_integer('initialization', 0, "initialization: 0 - default, 1 - uniform, 2 - target", short_name='init')
    flags.DEFINE_float('learning_rate', 0.01, "set learning rate", short_name='lr')
    flags.DEFINE_integer('num_steps', 1, "set number of iterations", short_name='step')
    flags.DEFINE_boolean('eval', False, "evaluate -log p(y|x) given the seq and struct", short_name='eval')
    flags.DEFINE_integer('objective', 0, "0: -log p(y|x), 1: Delta_G(x, y)", short_name='obj')
    flags.DEFINE_integer('penalty', 1000, "penalty value")
    flags.DEFINE_boolean('verbose', False, "print out more information")
    argv = FLAGS(sys.argv)

def main():
    initialization = str(FLAGS.init)
    learning_rate = str(FLAGS.lr)
    num_steps = str(FLAGS.step)
    eval_seq = '1' if FLAGS.eval else '0'
    objective = str(FLAGS.obj)
    penalty = str(FLAGS.penalty)
    is_verbose = '1' if FLAGS.verbose else '0'

    # TODO: error handling

    path = os.path.dirname(os.path.abspath(__file__))
    cmd = ["%s/%s" % (path, 'bin/expectedpartition'), initialization, learning_rate, num_steps, eval_seq, objective, penalty, is_verbose]
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

