#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_string('mode', "ncrna_design", "ncrna_design/expected_energy/")
    flags.DEFINE_string('objective', "pyx_sampling", "pyx_sampling/pyx_jensen", short_name='o')
    flags.DEFINE_string('initializations', "targeted_sm", "uniform/targeted/input", short_name='init')
    flags.DEFINE_float('learning_rate', 0.0005, "learning rate", short_name='lr')
    flags.DEFINE_integer('num_steps', -1, "set number of iterations", short_name='step')
    flags.DEFINE_boolean('verbose', False, "print out more information")
    flags.DEFINE_integer('beamsize', 100, "set beam size", short_name='b')
    flags.DEFINE_boolean('sharpturn', False, "set sharpturn")
    flags.DEFINE_integer('sample_size', 2500, "number of samples", short_name='k')
    flags.DEFINE_integer('resample_iter', 1, "resampling every iter step", short_name='iter')
    flags.DEFINE_integer('seed', 42, "random seed")
    flags.DEFINE_float('eps', -1.0, "eps * uniform + (1 - eps) * targeted")
    flags.DEFINE_string('sequence', "", "initialization sequence", short_name='seq')
    flags.DEFINE_boolean('test', False, "test mode")
    flags.DEFINE_integer('best_k', 5, "Best k samples")
    flags.DEFINE_boolean('softmax', False, "Use softmax instead of projection")
    flags.DEFINE_boolean('adam', False, "Use adam learning rate (require softmax too)")

    argv = FLAGS(sys.argv)

def main():
    mode = str(FLAGS.mode)
    objective = str(FLAGS.o)
    initialization = str(FLAGS.init)
    learning_rate = str(FLAGS.lr)
    num_steps = str(FLAGS.step)
    verbose = '1' if FLAGS.verbose else '0'
    beamsize = str(FLAGS.b)
    sharpturn = '1' if FLAGS.sharpturn else '0'
    sample_size = str(FLAGS.k)
    resample_iter = str(FLAGS.iter)
    seed = str(FLAGS.seed)
    eps = str(FLAGS.eps)
    seq = str(FLAGS.seq)
    best_k = str(FLAGS.best_k)
    softmax = '1' if FLAGS.softmax else '0'
    adam = '1' if FLAGS.adam else '0'

    # TODO: error handling

    if FLAGS.test:
        path = os.path.dirname(os.path.abspath(__file__))
        cmd = ["%s/%s" % (path, 'bin/main_test'), mode, objective, initialization, learning_rate, num_steps, verbose, beamsize, sharpturn, sample_size, resample_iter, seed, eps, seq, best_k, softmax, adam]
        subprocess.call(cmd, stdin=sys.stdin)
    else:
        path = os.path.dirname(os.path.abspath(__file__))
        cmd = ["%s/%s" % (path, 'bin/main'), mode, objective, initialization, learning_rate, num_steps, verbose, beamsize, sharpturn, sample_size, resample_iter, seed, eps, seq, best_k, softmax, adam]
        subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

