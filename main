#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_string('mode', "ncrna_design", "Perform non-Coding RNA Design")
    flags.DEFINE_string('objective', "prob", "Minimizes -E[log p(y | x)] using sampling approximation", short_name='obj')
    
    flags.DEFINE_string('initializations', "targeted_sm", "Initialization methods (uniform/targeted/random)", short_name='init')
    flags.DEFINE_float('eps', 0.75, "eps * uniform + (1 - eps) * targeted")
    flags.DEFINE_string('init_seq', "", "initialization sequence", short_name='seq')

    # TODO: default lr for softmax should be 0.01
    # TODO: make softmax adam default mode
    flags.DEFINE_boolean('projection', False, "Use projection update instead of softmax")
    # TODO: adam should require softmax
    flags.DEFINE_boolean('no_adam', False, "turn off adam optimizer")
    flags.DEFINE_boolean('nesterov', False, "Use nesterov's accelerated gradient descent")
    flags.DEFINE_float('beta_1', 0.9, "Adam first moment decay", short_name='b1')
    flags.DEFINE_float('beta_2', 0.999, "Adam second moment decay", short_name='b2')
    
    flags.DEFINE_float('initial_lr', 0.01, "set learning rate", short_name='lr')
    flags.DEFINE_boolean('lr_decay', False, "Use learning rate decay")
    flags.DEFINE_float('lr_decay_rate', 0.96, "Decay rate")
    flags.DEFINE_boolean('staircase', False, "Decay rate follows a staircase function")
    flags.DEFINE_integer('lr_decay_step', 50, "Decay every n steps")
    
    flags.DEFINE_integer('num_steps', -1, "set number of iterations (-1 for adaptive steps)", short_name='step')
    flags.DEFINE_boolean('verbose', False, "print out distribution and gradient at each step")
    
    # used in linearpartition
    flags.DEFINE_integer('beamsize', 250, "set beam size", short_name='b')
    flags.DEFINE_boolean('sharpturn', False, "set sharpturn")

    # sampling
    flags.DEFINE_integer('sample_size', 2500, "number of samples", short_name='k')
    flags.DEFINE_integer('resample_iter', 1, "resampling every iter step", short_name='iter')
    flags.DEFINE_integer('best_k', 1, "Print out best k samples")

    flags.DEFINE_integer('seed', 42, "random seed")
    flags.DEFINE_boolean('kmers', False, "kmers analysis")
    flags.DEFINE_boolean('test', False, "test mode")

    flags.DEFINE_boolean('is_lazy', False, "Use lazy outside for LinearPartition NED")
    flags.DEFINE_boolean('no_trimismatch', False, "Ablate 4 x 4 x 4 coupled trimismatch for 1 x 2, 1 x 3, 1 x n")

    argv = FLAGS(sys.argv)

def main():
    mode = str(FLAGS.mode)
    objective = str(FLAGS.obj)

    initialization = str(FLAGS.init)
    eps = str(FLAGS.eps)
    init_seq = str(FLAGS.seq)

    softmax = '0' if FLAGS.projection else '1'
    adam = '0' if FLAGS.no_adam else '1'
    nesterov = '1' if FLAGS.nesterov else '0'
    beta_1 = str(FLAGS.beta_1)
    beta_2 = str(FLAGS.beta_2)

    initial_lr = str(FLAGS.lr)
    lr_decay = '1' if FLAGS.lr_decay else '0'
    lr_decay_rate = str(FLAGS.lr_decay_rate)
    staircase = '1' if FLAGS.staircase else '0'
    lr_decay_step = str(FLAGS.lr_decay_step)

    num_steps = str(FLAGS.step)
    verbose = '1' if FLAGS.verbose else '0'

    beamsize = str(FLAGS.b)
    sharpturn = '1' if FLAGS.sharpturn else '0'

    sample_size = str(FLAGS.k)
    resample_iter = str(FLAGS.iter)
    best_k = str(FLAGS.best_k)

    seed = str(FLAGS.seed)
    kmers = '1' if FLAGS.kmers else '0'
    is_lazy = '1' if FLAGS.is_lazy else '0'
    trimismatch = '0' if FLAGS.no_trimismatch else '1'

    exe_file = 'bin/main_test' if FLAGS.test else 'bin/main'

    # TODO: error handling

    path = os.path.dirname(os.path.abspath(__file__))
    cmd = ["%s/%s" % (path, exe_file), mode, objective, initialization, eps, init_seq, softmax, adam, nesterov, beta_1, beta_2, initial_lr, lr_decay, lr_decay_rate, staircase, lr_decay_step, num_steps, verbose, beamsize, sharpturn, sample_size, resample_iter, best_k, seed, kmers, is_lazy, trimismatch]
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

