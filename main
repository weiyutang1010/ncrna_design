#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_string('mode', "ncrna_design", "non-Coding RNA Design")
    flags.DEFINE_string('objective', "prob", "objectives: \"prob\", \"ned\", \"dist\", \"ddg\"", short_name='obj')
    
    # initialization
    flags.DEFINE_string('initializations', "targeted", "initializations: uniform / targeted", short_name='init')
    flags.DEFINE_float('eps', 0.75, "eps * uniform + (1 - eps) * targeted")

    # TODO: adam should require softmax
    # parameterization
    flags.DEFINE_boolean('projection', False, "use projection instead of softmax parameterization")
    flags.DEFINE_boolean('no_adam', False, "turn off adam optimizer")
    flags.DEFINE_boolean('nesterov', False, "use nesterov's accelerated gradient descent")
    flags.DEFINE_float('beta_1', 0.9, "Adam's first moment decay rate", short_name='b1')
    flags.DEFINE_float('beta_2', 0.999, "Adam's second moment decay rate", short_name='b2')
    
    # learning rate
    flags.DEFINE_float('initial_lr', 0.01, "set learning rate", short_name='lr')
    flags.DEFINE_boolean('lr_decay', False, "use learning rate decay")
    flags.DEFINE_float('lr_decay_rate', 0.96, "decay rate")
    flags.DEFINE_boolean('adaptive_lr', False, "use adaptive learning rate decay")
    flags.DEFINE_integer('k_ma_lr', 10, "parameter for adaptive lr decay")
    
    # number of steps
    flags.DEFINE_integer('num_steps', 2000, "set the max number of steps", short_name='step')
    flags.DEFINE_boolean('adaptive_step', True, "turn on adaptive step")
    flags.DEFINE_integer('k_ma', 50, "parameter for adaptive step")
    
    # used in linearpartition and linearfold
    flags.DEFINE_integer('beamsize', 250, "set beam size", short_name='b')
    flags.DEFINE_boolean('sharpturn', False, "set sharpturn")
    flags.DEFINE_boolean('is_lazy', False, "use lazy outside for LinearPartition BPP")

    # sampling
    flags.DEFINE_integer('sample_size', 2500, "number of samples", short_name='k')
    flags.DEFINE_integer('best_k', 1, "print out best k samples")

    # ablation studies
    flags.DEFINE_boolean('no_mismatch', False, "ablate 4 x 4 coupled mismatch")
    flags.DEFINE_boolean('no_trimismatch', False, "ablate 4 x 4 x 4 coupled trimismatch for 1 x 2, 1 x 3, 1 x n internal loops")

    flags.DEFINE_boolean('verbose', False, "print out distribution and gradient at each step")
    flags.DEFINE_integer('seed', 42, "random seed")
    flags.DEFINE_integer('num_threads', 0, "number of threads used in openmp (0 for default)")
    flags.DEFINE_boolean('boxplot', False, "print out the objective of all samples")

    # flags.DEFINE_boolean('kmers', False, "kmers analysis")
    flags.DEFINE_boolean('test', False, "test mode")

    argv = FLAGS(sys.argv)

def main():
    mode = str(FLAGS.mode)
    objective = str(FLAGS.obj)

    init = str(FLAGS.init)
    eps = str(FLAGS.eps)

    softmax = '0' if FLAGS.projection else '1'
    adam = '0' if FLAGS.no_adam else '1'
    nesterov = '1' if FLAGS.nesterov else '0'
    beta_1 = str(FLAGS.beta_1)
    beta_2 = str(FLAGS.beta_2)

    initial_lr = str(FLAGS.lr)
    lr_decay = '1' if FLAGS.lr_decay else '0'
    lr_decay_rate = str(FLAGS.lr_decay_rate)
    adaptive_lr= '1' if FLAGS.adaptive_lr else '0'
    k_ma_lr = str(FLAGS.k_ma_lr)

    num_steps = str(FLAGS.step)
    adaptive_step= '1' if FLAGS.adaptive_step else '0'
    k_ma = str(FLAGS.k_ma)

    beamsize = str(FLAGS.b)
    sharpturn = '1' if FLAGS.sharpturn else '0'
    is_lazy = '1' if FLAGS.is_lazy else '0'

    sample_size = str(FLAGS.k)
    best_k = str(FLAGS.best_k)

    mismatch = '0' if FLAGS.no_mismatch else '1'
    trimismatch = '0' if FLAGS.no_trimismatch else '1'

    verbose = '1' if FLAGS.verbose else '0'
    seed = str(FLAGS.seed)
    num_threads = str(FLAGS.num_threads)
    boxplot = '1' if FLAGS.boxplot else '0'

    # kmers = '1' if FLAGS.kmers else '0'
    exe_file = 'bin/main_test' if FLAGS.test else 'bin/main'

    # TODO: error handling

    path = os.path.dirname(os.path.abspath(__file__))
    cmd = ["%s/%s" % (path, exe_file), mode, objective, init, eps, softmax, adam, nesterov, beta_1, beta_2, initial_lr, lr_decay, lr_decay_rate, adaptive_lr, k_ma_lr, num_steps, adaptive_step, k_ma, beamsize, sharpturn, is_lazy, sample_size, best_k, mismatch, trimismatch, verbose, seed, num_threads, boxplot]
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

