%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Thu Apr 25 11:53:34 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUAAAUGCAACGGAAAAAAAACGGCC\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[100.00000000 125.00000000]
[100.00000000 150.00000000]
[82.97437286 168.30650330]
[58.04000092 170.11676025]
[35.70584869 158.88351440]
[12.46795845 168.10308838]
[3.90999389 191.59268188]
[15.77104950 213.59985352]
[40.09693146 219.36625671]
[60.57435226 205.02487183]
[85.50872803 203.21463013]
[105.00000000 218.86997986]
[130.00000000 218.86997986]
[149.49127197 203.21463013]
[174.42564392 205.02487183]
[188.39379883 225.75868225]
[211.14221191 236.12736511]
[235.95451355 233.06962585]
[255.50495911 217.48822021]
[264.02136230 193.98352051]
[258.98928833 169.49519348]
[241.89442444 151.25332642]
[217.78398132 144.64375305]
[193.77645874 151.61791992]
[176.95999146 170.11676025]
[152.02561951 168.30650330]
[135.00000000 150.00000000]
[135.00000000 125.00000000]
[135.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[117.50000000 183.34598424 37.65905821 242.30947410 203.53810518 1.00000000]
[]
[34.35822220 189.38212446 30.52836670 320.87129337 272.53005534 1.00000000]
[34.35822220 189.38212446 30.52836670 272.53005534 224.18881731 1.00000000]
[34.35822220 189.38212446 30.52836670 224.18881731 175.84757928 1.00000000]
[34.35822220 189.38212446 30.52836670 175.84757928 127.50634124 1.00000000]
[34.35822220 189.38212446 30.52836670 127.50634124 79.16510321 1.00000000]
[34.35822220 189.38212446 30.52836670 79.16510321 30.82386518 1.00000000]
[]
[117.50000000 183.34598424 37.65905821 148.15705337 109.38568445 1.00000000]
[117.50000000 183.34598424 37.65905821 109.38568445 70.61431554 1.00000000]
[117.50000000 183.34598424 37.65905821 70.61431554 31.84294662 1.00000000]
[]
[218.13259539 190.65196773 46.00953986 161.79669098 130.26783693 1.00000000]
[218.13259539 190.65196773 46.00953986 130.26783693 98.73898288 1.00000000]
[218.13259539 190.65196773 46.00953986 98.73898288 67.21012882 1.00000000]
[218.13259539 190.65196773 46.00953986 67.21012882 35.68127477 1.00000000]
[218.13259539 190.65196773 46.00953986 35.68127477 4.15242072 1.00000000]
[218.13259539 190.65196773 46.00953986 4.15242072 332.62356667 1.00000000]
[218.13259539 190.65196773 46.00953986 332.62356667 301.09471262 1.00000000]
[218.13259539 190.65196773 46.00953986 301.09471262 269.56585856 1.00000000]
[218.13259539 190.65196773 46.00953986 269.56585856 238.03700451 1.00000000]
[218.13259539 190.65196773 46.00953986 238.03700451 206.50815046 1.00000000]
[]
[117.50000000 183.34598424 37.65905821 336.46189481 297.69052590 1.00000000]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 12]
[5 11]
[15 27]
[16 26]
] def

init

% Start Annotations
1 1 13 1.0 0.7882305194033113 0.7882305194033113 omark 2 2 13 1.0 0.8070731814518142 0.8070731814518142 omark 3 3 13 1.0 0.8042798497515639 0.8042798497515639 omark 4 4 13 1.0 0.8400167085588316 0.8400167085588316 omark 5 5 13 1.0 0.8413601609753645 0.8413601609753645 omark 6 6 13 1.0 0.9914921983282204 0.9914921983282204 omark 7 7 13 1.0 1.0 1.0 omark 8 8 13 1.0 1.0 1.0 omark 9 9 13 1.0 1.0 1.0 omark 10 10 13 1.0 0.9671168941264703 0.9671168941264703 omark 11 11 13 1.0 0.8413601609753645 0.8413601609753645 omark 12 12 13 1.0 0.8400167085588316 0.8400167085588316 omark 13 13 13 1.0 0.9998562545913415 0.9998562545913415 omark 14 14 13 1.0 0.9999411850312563 0.9999411850312563 omark 15 15 13 1.0 0.7476586835254923 0.7476586835254923 omark 16 16 13 1.0 0.75884665104448 0.75884665104448 omark 17 17 13 1.0 0.9817518551609283 0.9817518551609283 omark 18 18 13 1.0 0.9997584985078244 0.9997584985078244 omark 19 19 13 1.0 0.9988298073038626 0.9988298073038626 omark 20 20 13 1.0 0.9991529338699104 0.9991529338699104 omark 21 21 13 1.0 0.9982255104844141 0.9982255104844141 omark 22 22 13 1.0 0.9990430084191263 0.9990430084191263 omark 23 23 13 1.0 0.9993065252472774 0.9993065252472774 omark 24 24 13 1.0 0.9993471153986436 0.9993471153986436 omark 25 25 13 1.0 0.9958579693726386 0.9958579693726386 omark 26 26 13 1.0 0.75884665104448 0.75884665104448 omark 27 27 13 1.0 0.7476586835254923 0.7476586835254923 omark 28 28 13 1.0 0.8042798497515639 0.8042798497515639 omark 29 29 13 1.0 0.8070731814518142 0.8070731814518142 omark 30 30 13 1.0 0.7882305194033113 0.7882305194033113 omark 10 cmark 10 -1.3 -1.3 (10) Label 20 cmark 20 -1.3 -1.3 (20) Label 30 cmark 30 -1.3 -1.3 (30) Label 1 cmark 1 0.30000000000000004 -1.1 (1) Label 30 cmark 30 -1.3 -1.3 (30) Label 
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
